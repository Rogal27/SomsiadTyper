AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SomsiadTyper

  Sample SAM Template for SomsiadTyper
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'somsiadtyperwebsite-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html

  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  # this function is used only during deployment, 
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers: 
        # the layer contains the deployment code 
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn

      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: website/

      # really important: this will ensure that any change in 
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live

      # the following two lines are required to make the layer work
      Runtime: python3.7
      Handler: deployer.resource_handler

      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600

      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref TargetBucket

  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:

      # the following two lines are required to 
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"

      # tell the deployer where to upload the files
      TargetBucket: !Ref TargetBucket

      Substitutions:
        FilePattern: "*.html"
        Values:
          APP_NAME: 'Example Application'
          STACK_ID: !Ref AWS::StackId
      
      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600


  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: GET

  GoodbyeWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: goodbye_world/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        GoodbyeWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /goodbye
            Method: GET

  InsertUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: add-person/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTestDBTable
      Events:
        GoodbyeWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /insertuser
            Method: POST
  
  UsersTestDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "Name"
          AttributeType: "S"
        - 
          AttributeName: "Surname"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "Surname"
          KeyType: "HASH"
        - 
          AttributeName: "Name"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Sub 'userstest-${AWS::StackName}'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  DestinationBucket:
    Value: !Ref TargetBucket
  DestinationUrl:
    Value: !GetAtt TargetBucket.WebsiteURL
