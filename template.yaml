AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SomsiadTyper

  Sample SAM Template for SomsiadTyper
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  DynamoDBReadCapacityUnits:
    Type: Number
    Default: 2
  DynamoDBWriteCapacityUnits:
    Type: Number
    Default: 2
  DynamoDBReadCapacityUnitsIndex:
    Type: Number
    Default: 1
  DynamoDBWriteCapacityUnitsIndex:
    Type: Number
    Default: 1
  Version:
    Type: String
    Default: 1.0.0
  Stage:
    Type: String
    Default: Dev

Resources:
  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'somsiadtyperwebsite-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
  
  TargetBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref TargetBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${TargetBucket}/*"
    
  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      UserPoolName: 'SomsiadTyper'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: name
          Mutable: True
          Required: False
          StringAttributeConstraints:
            MaxLength: "128"
            MinLength: "0"

      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn
        PreTokenGeneration: !GetAtt PreTokenGenerationFunction.Arn
      
      EmailVerificationSubject: 'Verify your email - Somsiad Typer'
      #EmailVerificationMessage: 'Your verification link is {username} {####}'

      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      # VerificationMessageTemplate:
      #   DefaultEmailOption: CONFIRM_WITH_LINK
      #   EmailSubjectByLink: 'Welcome to Somsiad Typer'
      #   #EmailMessageByLink: 'Your link is {####}'

  UserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: 'SomsiadTyperApp'
      GenerateSecret: False

  #api for cognito
  SomsiadTyperApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: SomsiadTyperApi
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'*'" # "Content-Type, X-Amz-Date, Authorization, X-Api-Key"
        AllowOrigin: "'*'"
        #!GetAtt WebsiteBucket.WebsiteURL
        MaxAge: "'600'"
        # AllowCredentials: True
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"

  # this function is used only during deployment, 
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers: 
        # the layer contains the deployment code 
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn

      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: website/

      # really important: this will ensure that any change in 
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live

      # the following two lines are required to make the layer work
      Runtime: python3.7
      Handler: deployer.resource_handler

      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600

      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref TargetBucket

  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:

      # the following two lines are required to 
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"

      # tell the deployer where to upload the files
      TargetBucket: !Ref TargetBucket

      Substitutions:
        FilePattern: "js/config.js"
        Values:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolTokenClient
          AWS_REGION: !Ref AWS::Region
          INVOKE_URL: !Sub "https://${SomsiadTyperApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"      
      
      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600

  PostConfirmationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PreTokenGenerationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: cognito-lambda/post-confirmation/
      Handler: app.handler
      Runtime: nodejs12.x
      # Policies:
      #   - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
      #   - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      #   - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  
  PreTokenGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-lambda/pre-token-generation/
      Handler: app.handler
      Runtime: nodejs12.x

  DBTablesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dbtables
      Description: JSON containing dbtables names.
      ContentUri: layers/db-tables/
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs12.x

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            RestApiId: !Ref SomsiadTyperApi
            Method: GET

  GoodbyeWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: goodbye_world/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        GoodbyeWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /goodbye
            RestApiId: !Ref SomsiadTyperApi
            Method: GET

  # InsertUserFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: add-person/
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs12.x
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref UsersTestDBTable
  #     Events:
  #       InsertUser:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /insertuser
  #           Method: POST

  SampleHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/sample-handler/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        SampleHandler:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /samplehandler
            Method: GET

  InsertTournamentFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/create_tournament/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        InsertTournament:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /createtournament
            RestApiId: !Ref SomsiadTyperApi
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
            RequestParameters:
              - method.request.header.Authorization:
                  Required: true
                  Caching: true

  ReadContestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/read_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        ReadContest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /readcontest
            Method: GET  
            RestApiId: !Ref SomsiadTyperApi

  DeleteContestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/delete_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        DeleteContest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /deletecontest
            Method: POST  
            RestApiId: !Ref SomsiadTyperApi

  AddMatchFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/add_match/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        InsertTournament:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /addmatch
            Method: POST  
            RestApiId: !Ref SomsiadTyperApi

  ReadMatchesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/read_matches/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        ReadContest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /readmatches
            Method: GET  
            RestApiId: !Ref SomsiadTyperApi

  UpdateMatchesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref DBTablesLayer    
      CodeUri: handlers/update_matches/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        ReadContest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /updatematches
            Method: POST
            RestApiId: !Ref SomsiadTyperApi

  DeleteMatchesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/delete_match/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        ReadContest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /deletematch
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
  
            
  # dynamoDB setup

  # users
  UsersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "user_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "email_index"
          KeySchema:
            - 
              AttributeName: "email"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "user_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users-${AWS::StackName}'

  # users_contests
  UsersContestsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "UsersDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "contest_id" 
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "user_index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "contest_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "contest_index"
          KeySchema:
            - 
              AttributeName: "contest_id"
              KeyType: "HASH"
            - 
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users_contests-${AWS::StackName}'

  # contests
  ContestsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "UsersContestsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "contest_id"
          AttributeType: "S"
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "contest_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "name_index"
          KeySchema:
            - 
              AttributeName: "name"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "contest_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'contests-${AWS::StackName}'

  # matches
  MatchesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "ContestsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "match_id"
          AttributeType: "S"
        - 
          AttributeName: "match_info"
          AttributeType: "S"
        - 
          AttributeName: "contest_id"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "match_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "info_index"
          KeySchema:
            - 
              AttributeName: "match_info"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "match_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "contest_index"
          KeySchema:
            - 
              AttributeName: "contest_id"
              KeyType: "HASH"
            - 
              AttributeName: "match_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "match_info"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'matches-${AWS::StackName}'

  # teams
  TeamsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "MatchesDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'teams-${AWS::StackName}'

  # users_Scores
  UsersScoresDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "TeamsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "match_id"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "user_index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "match_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "match_index"
          KeySchema:
            - 
              AttributeName: "match_id"
              KeyType: "HASH"
            - 
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users_scores-${AWS::StackName}'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for selected stage"
    Value: !Sub "https://${SomsiadTyperApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  DestinationStaticUrl:
    Description: "Static S3 website URL:"
    Value: !GetAtt TargetBucket.WebsiteURL
