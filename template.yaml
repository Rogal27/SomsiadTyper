AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SomsiadTyper

  Sample SAM Template for SomsiadTyper
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  DynamoDBReadCapacityUnits:
    Type: Number
    Default: 2
  DynamoDBWriteCapacityUnits:
    Type: Number
    Default: 2
  DynamoDBReadCapacityUnitsIndex:
    Type: Number
    Default: 1
  DynamoDBWriteCapacityUnitsIndex:
    Type: Number
    Default: 1

Resources:
  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'somsiadtyperwebsite-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html

  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  # this function is used only during deployment, 
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers: 
        # the layer contains the deployment code 
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn

      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: website/

      # really important: this will ensure that any change in 
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live

      # the following two lines are required to make the layer work
      Runtime: python3.7
      Handler: deployer.resource_handler

      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600

      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref TargetBucket

  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:

      # the following two lines are required to 
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"

      # tell the deployer where to upload the files
      TargetBucket: !Ref TargetBucket

      Substitutions:
        FilePattern: "*.html"
        Values:
          APP_NAME: 'Example Application'
          STACK_ID: !Ref AWS::StackId
      
      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600


  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: GET

  GoodbyeWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: goodbye_world/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        GoodbyeWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /goodbye
            Method: GET

  # InsertUserFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: add-person/
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs12.x
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref UsersTestDBTable
  #     Events:
  #       InsertUser:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /insertuser
  #           Method: POST

  SampleHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/sample-handler/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        SampleHandler:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /samplehandler
            Method: GET

  InsertTournamentFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/create_tournament/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        InsertTournament:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /createtournament
            Method: POST  

  # dynamoDB setup

  # users
  UsersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: "N"
        - 
          AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "user_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "email_index"
          KeySchema:
            - 
              AttributeName: "email"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "user_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users-${AWS::StackName}'

  # users_contests
  UsersContestsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "UsersDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "N"
        - 
          AttributeName: "user_id"
          AttributeType: "N"
        - 
          AttributeName: "contest_id" 
          AttributeType: "N"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "user_index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "contest_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "contest_index"
          KeySchema:
            - 
              AttributeName: "contest_id"
              KeyType: "HASH"
            - 
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users_contests-${AWS::StackName}'

  # contests
  ContestsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "UsersContestsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "contest_id"
          AttributeType: "N"
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "contest_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "name_index"
          KeySchema:
            - 
              AttributeName: "name"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "contest_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'contests-${AWS::StackName}'

  # matches
  MatchesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "ContestsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "match_id"
          AttributeType: "N"
        - 
          AttributeName: "match_info"
          AttributeType: "S"
        - 
          AttributeName: "contest_id"
          AttributeType: "N"
      KeySchema:
        - 
          AttributeName: "match_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "info_index"
          KeySchema:
            - 
              AttributeName: "match_info"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "match_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "contest_index"
          KeySchema:
            - 
              AttributeName: "contest_id"
              KeyType: "HASH"
            - 
              AttributeName: "match_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "match_info"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'matches-${AWS::StackName}'

  # teams
  TeamsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "MatchesDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'teams-${AWS::StackName}'

  # users_Scores
  UsersScoresDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "TeamsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "N"
        - 
          AttributeName: "user_id"
          AttributeType: "N"
        - 
          AttributeName: "match_id"
          AttributeType: "N"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "user_index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "match_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "match_index"
          KeySchema:
            - 
              AttributeName: "match_id"
              KeyType: "HASH"
            - 
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users_scores-${AWS::StackName}'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  DestinationBucket:
    Value: !Ref TargetBucket
  DestinationUrl:
    Value: !GetAtt TargetBucket.WebsiteURL
