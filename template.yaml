AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SomsiadTyper

  Sample SAM Template for SomsiadTyper
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  DynamoDBReadCapacityUnits:
    Type: Number
    Default: 2
  DynamoDBWriteCapacityUnits:
    Type: Number
    Default: 2
  DynamoDBReadCapacityUnitsIndex:
    Type: Number
    Default: 1
  DynamoDBWriteCapacityUnitsIndex:
    Type: Number
    Default: 1
  Version:
    Type: String
    Default: 1.0.0
  Stage:
    Type: String
    Default: Dev

Resources:
  # S3 buckets ------------------------------------------------------------------------------------
  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'somsiadtyperwebsite-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
  
  TargetBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref TargetBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${TargetBucket}/*"
  
  UserPhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'userprofilephotos-somsiadtyper'
      
  UserPhotosBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref UserPhotosBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${UserPhotosBucket}/*"

  # deployment application ------------------------------------------------------------------------
  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  # Cognito ---------------------------------------------------------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      UserPoolName: 'SomsiadTyper'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: name
          Mutable: True
          Required: False
          StringAttributeConstraints:
            MaxLength: "128"
            MinLength: "0"
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn
        PreTokenGeneration: !GetAtt PreTokenGenerationFunction.Arn
        PreSignUp: !GetAtt PreSignUpFunction.Arn      
      EmailVerificationSubject: 'Verify your email - Somsiad Typer'
      #EmailVerificationMessage: 'Your verification link is {username} {####}'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      # VerificationMessageTemplate:
      #   DefaultEmailOption: CONFIRM_WITH_LINK
      #   EmailSubjectByLink: 'Welcome to Somsiad Typer'
      #   #EmailMessageByLink: 'Your link is {####}'

  UserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: 'SomsiadTyperApp'
      GenerateSecret: False

  # API gateway -----------------------------------------------------------------------------------
  SomsiadTyperApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: SomsiadTyperApi
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'*'" # "Content-Type, X-Amz-Date, Authorization, X-Api-Key"
        AllowOrigin: "'*'"
        #!GetAtt WebsiteBucket.WebsiteURL
        MaxAge: "'600'"
        # AllowCredentials: True
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"

  # S3 file deployment lambda ---------------------------------------------------------------------
  # this function is used only during deployment, 
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers: 
        # the layer contains the deployment code 
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn
      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: website/
      # really important: this will ensure that any change in 
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live
      # the following two lines are required to make the layer work
      Runtime: python3.7
      Handler: deployer.resource_handler
      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600
      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref TargetBucket
  
  UserPhotosSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers: 
        - !GetAtt DeploymentLayer.Outputs.Arn
      CodeUri: photos-bucket/
      AutoPublishAlias: live
      Runtime: python3.7
      Handler: deployer.resource_handler
      Timeout: 300
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UserPhotosBucket
  
  # S3 file deployment custom resource ------------------------------------------------------------
  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      # the following two lines are required to 
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"
      # tell the deployer where to upload the files
      TargetBucket: !Ref TargetBucket
      Substitutions:
        FilePattern: "js/config.js"
        Values:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolTokenClient
          AWS_REGION: !Ref AWS::Region
          INVOKE_URL: !Sub "https://${SomsiadTyperApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"      
      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600

  UserPhotosDeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt UserPhotosSource.Arn
      Version: !Ref "UserPhotosSource.Version"
      # tell the deployer where to upload the files
      TargetBucket: !Ref UserPhotosBucket      
      # # Choose the ACL and caching policies
      # # eg, for directly accessible web site
      # # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600

  # Cognito lambda trigger permission -------------------------------------------------------------
  PostConfirmationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PreTokenGenerationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # Cognito lambda trigger ------------------------------------------------------------------------
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: cognito-lambda/post-confirmation/
      Handler: app.handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersDynamoDBTable
  
  PreTokenGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: cognito-lambda/pre-token-generation/
      Handler: app.handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersDynamoDBTable
  
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: cognito-lambda/pre-sign-up/
      Handler: app.handler
      Runtime: nodejs12.x
      
  # Layer containing dbtables info ----------------------------------------------------------------
  DBTablesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dbtables
      Description: JSON containing dbtables names.
      ContentUri: layers/db-tables/
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs12.x

  # ADMIN lambda ----------------------------------------------------------------------------------
  AddMatchFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/ADMIN/add_match/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        AddMatch:
          Type: Api 
          Properties:
            Path: /addmatch
            Method: POST  
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  CreateContestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/ADMIN/create_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        CreateContest:
          Type: Api 
          Properties:
            Path: /createtournament
            RestApiId: !Ref SomsiadTyperApi
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteContestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/ADMIN/delete_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        DeleteContest:
          Type: Api 
          Properties:
            Path: /deletecontest
            Method: POST  
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteMatchFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/ADMIN/delete_match/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        DeleteMatch:
          Type: Api 
          Properties:
            Path: /deletematch
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  ReadAllMatchesInContestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/ADMIN/read_all_matches_in_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
      Events:
        ReadAllMatchesInContest:
          Type: Api 
          Properties:
            Path: /readmatches
            Method: POST  
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateScoreInMatchFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer    
      CodeUri: handlers/ADMIN/update_score_in_match/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersScoresDynamoDBTable
      Events:
        UpdateScoreInMatch:
          Type: Api 
          Properties:
            Path: /updatematches
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer  

  # Read Contests lambda --------------------------------------------------------------------------
  ReadContestsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/read_contests/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContestsDynamoDBTable
      Events:
        ReadContests:
          Type: Api 
          Properties:
            Path: /readcontest
            Method: GET  
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer  
  
  # Read Past Matches lambda ---------------------------------------------------------------------- 
  ReadPastMatchesUserContestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/read_past_matches_user_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersScoresDynamoDBTable 
      Events:
        ReadPastMatchesUserContest:
          Type: Api 
          Properties:
            Path: /readscores
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer
  
  # type lambda -----------------------------------------------------------------------------------
  AddTypeFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/type/add_type/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersScoresDynamoDBTable
      Events:
        AddType:
          Type: Api 
          Properties:
            Path: /addtype
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer
  
  ReadFutureMatchesUserContestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/type/read_future_matches_user_contest/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesDynamoDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersScoresDynamoDBTable 
      Events:
        ReadFutureMatchesUserContest:
          Type: Api 
          Properties:
            Path: /readmatchestotype
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  # user_profile lambda ---------------------------------------------------------------------------
  GetUserInfoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/user_profile/user_info/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersDynamoDBTable
      Events:
        GetUserInfo:
          Type: Api 
          Properties:
            Path: /user_info
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  SetUserProfilePictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref DBTablesLayer
      CodeUri: handlers/user_profile/set_profile_picture/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersDynamoDBTable
        - S3FullAccessPolicy:
            BucketName: !Ref UserPhotosBucket
      Events:
        SetProfilePicture:
          Type: Api 
          Properties:
            Path: /set_profile_picture
            Method: POST
            RestApiId: !Ref SomsiadTyperApi
            Auth:
              Authorizer: CognitoAuthorizer

  # dynamoDB setup --------------------------------------------------------------------------------
  # users -----------------------------------------------------------------------------------------
  UsersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "user_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "email_index"
          KeySchema:
            - 
              AttributeName: "email"
              KeyType: "HASH"
          Projection:
            # NonKeyAttributes:
            #   - "user_id"
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users-${AWS::StackName}'

  # users_contests --------------------------------------------------------------------------------
  UsersContestsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "UsersDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "contest_id" 
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "user_index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "contest_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
              - "user_points"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "contest_index"
          KeySchema:
            - 
              AttributeName: "contest_id"
              KeyType: "HASH"
            - 
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "id"
              - "user_points"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users_contests-${AWS::StackName}'

  # contests --------------------------------------------------------------------------------------
  ContestsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "UsersContestsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "contest_id"
          AttributeType: "S"
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "contest_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "name_index"
          KeySchema:
            - 
              AttributeName: "name"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "contest_id"
              - "startdate"
              - "isActive"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'contests-${AWS::StackName}'

  # matches ---------------------------------------------------------------------------------------
  MatchesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "ContestsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "match_id"
          AttributeType: "S"
        - 
          AttributeName: "match_info"
          AttributeType: "S"
        - 
          AttributeName: "contest_id"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "match_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "info_index"
          KeySchema:
            - 
              AttributeName: "match_info"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "match_id"
              - "match_day"
              - "home_team_score"
              - "away_team_score"
              - "contest_id"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "contest_index"
          KeySchema:
            - 
              AttributeName: "contest_id"
              KeyType: "HASH"
            - 
              AttributeName: "match_id"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "match_info"
              - "match_day"
              - "home_team_score"
              - "away_team_score"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'matches-${AWS::StackName}'

  # teams -----------------------------------------------------------------------------------------
  TeamsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "MatchesDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'teams-${AWS::StackName}'

  # users_Scores ----------------------------------------------------------------------------------
  UsersScoresDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DependsOn: "TeamsDynamoDBTable"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "match_id"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "user_index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "match_id"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
        - 
          IndexName: "match_index"
          KeySchema:
            - 
              AttributeName: "match_id"
              KeyType: "HASH"
            - 
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref DynamoDBReadCapacityUnitsIndex
            WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnitsIndex
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref DynamoDBReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoDBWriteCapacityUnits
      TableName: !Sub 'users_scores-${AWS::StackName}'

# output ------------------------------------------------------------------------------------------
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for selected stage"
    Value: !Sub "https://${SomsiadTyperApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  DestinationStaticUrl:
    Description: "Static S3 website URL:"
    Value: !GetAtt TargetBucket.WebsiteURL
